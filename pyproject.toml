# This is an example configuration file for EPAB.
# 
# Version: 2018.8.27.3.
# 
# WARNING: this example file will be overwritten every time EPAB starts. Make sure to save your work under another 
# name!
# 
# It must be renamed to "pyproject.toml" in order to come into effect.
# 
# The configuration file follows the YAML format.
# 
# Mandatory and optional values
# =============================
# 
# Some values are mandatory, some aren't. Mandatory values are marked with the "MANDATORY VALUE" tag. If mandatory values
# are missing, EPAB will not start.
# 
# Note that, while not necessary for EPAB to function, failing to provide non-mandatory may prevent non-essential 
# modules to start. This will be indicated as such in the log and in the console.
# 
# Assigning values to keys
# ========================
# 
# A key is a name followed by a colon. For example: "key:". The value is what follows the colon. For example, here's
# how to assign the value "some_value" to the key "some_key:
# 
#     some_key: some_value
#     
# Indentation
# ===========
# 
# Indentation matters in YAML. Keys are grouped under a common parent. For example, a set of keys "key1", "key2" and 
# "key3" belonging to a group "Group", with their dummy values, would look like:
# 
# group:
#   key1: dummy
#   key2: dummy
#   key3: dummy
#   
# Flat keys
# =========
#   
# In addition to this grouping format, keys and values can also be expressed in a flat manner. This example would result
# in the same configuration as the one above:
# 
# group__key1: dummy
# group__key2: dummy
# group__key3: dummy
# 
# The different levels are separated with: "__". 
# 
# OS environment
# ==============
# 
# All configuration values may also be given using the OS environment instead of the config file. However, 
# the "EPAB_" prefix must be added (this is to prevent any potential conflict with other application.
# 
# For example, the configuration "dummy_key: dummy_value" would be set in the OS environment using the variable
# "setx EPAB_DUMMY_KEY=dummy_value".
# 
# In the case of grouped key, a key that is expressed like this in YAML:
# 
# group1:
#   group2:
#     group3:
#        dummy_key: dummy_value
#        
# would be translated into an OS environment value like this:
# "setx EPAB_GROUP1__GROUP2__GROUP3__DUMMY_KEY=dummy_value"
# 
# Please not that all configuration key given using OS environment should be UPPER CASE.
# 
# Values types
# =============
# Value types will be checked at runtime.
# 
# Possible values are: 
#     - string
#         A string is simple text. To protect special characters such as numbers or newlines, use single quotes.
#         example_key_1: this is a valid string
#         example_key_2: 'this is also a valid string'
#         example_key_3: 10 # this is NOT a string and will result in an error
#         example_key_4: '10' # this is the correct way to use an integer as a string
#         example_key_5: '\n' # this is the correct way to have a newline character as a string
#         
#         Multiline strings are simple to write. If you want to convert newlines into spaces, you can use the ">" marker.
#         For example:
#         example_key: >
#           This is
#           not
#           a multi
#           line
#           string
#           
#         will result in "This is not a multi line string".
#         
#         If you want to preserve the new lines, use the "|" character:
#         example_key: |
#           This is
#           a true
#           multi line
#           string
#           
#     - integer
#         An integer is a number without decimals.
#         
#         example_integer_1: 1
#         example_integer_1: -1
#         example_integer_1: 1000
#     
#     - float
#         A float is a number with decimals.
#         
#         example_float_1: 1.1
#         example_float_2: 1.12345
#         example_float_3: -1.12345
#         
#     - boolean
#         A boolean is either "true" or "false".
#         
#         For example:
#         dogs_are_awesome: true
#         enough_boosters: false
#         
#         Note: despite the YAML specification, the only values accepted by EPAB are "true" or "false". This is to 
#         prevent type casting from confusing the end-user, when any non-empty string or positive integer would yield 
#         "true".
#         
#     - list
#         A list in YAML is expressed as multiple lines beginning with a dash. For example, a list of strings:
#         strings:
#           - string1
#           - string2
#           - 'string3'
#           
#         A list of integers:
#         integers:
#           - 1
#           - 2
#           - 3
#           
#         Note the indentation for each line under the main key.
#
#
# START OF ACTUAL CONFIG FILE


[tool.epab]
# Package name
# value type: string
# MANDATORY CONFIG VALUE
package_name = "elib_config"

# Less console output
# value type: boolean
# This configuration is optional and comes with a default setting
# default: False
# quiet = 

# More console output
# value type: boolean
# This configuration is optional and comes with a default setting
# default: False
# verbose = 


[tool.epab.changelog]
# Disable changelog building
# value type: boolean
# This configuration is optional and comes with a default setting
# default: False
# disable = 

# Path to changelog file
# value type: path
# This configuration is optional and comes with a default setting
# default: CHANGELOG.rst
# file_path = 


[tool.epab.test]
# Additional options for test run
# value type: string
# This configuration is optional and comes with a default setting
# default: 
# runner_options = 

# Amount of \slow\ tests to show
# value type: integer
# This configuration is optional and comes with a default setting
# default: 10
# duration_count = 

# Target of pytest
# value type: string
# This configuration is optional and comes with a default setting
# default: test
# target = 

# Minimal coverage to pass tests
# value type: integer
# This configuration is optional and comes with a default setting
# default: 20
# coverage_fail_under = 


[tool.epab.lint]
# Linter max line width
# value type: integer
# This configuration is optional and comes with a default setting
# default: 120
# line_length = 

# List of comma separated files for flake8 to exclude
# value type: string
# This configuration is optional and comes with a default setting
# default: 
# flake8_exclude = 

# Additional MyPy arguments
# value type: string
# This configuration is optional and comes with a default setting
# default: 
# mypy_args = 


[tool.epab.freeze]
# Main entry point for pyinstaller
# value type: string
# This configuration is optional and comes with a default setting
# default: 
# entry_point = 

# PyInstaller data-files list
# value type: List of strings
# This configuration is optional and comes with a default setting
# default: []
# data_files = 


[tool.epab.doc]
# Documentation repository on Github
# value type: string
# This configuration is optional and comes with a default setting
# default: 
# repo = 

# Local documentation directory
# value type: path
# This configuration is optional and comes with a default setting
# default: ./doc
# folder = 


[tool.epab.appveyor]
# Additional command line options for tests run on AV
# value type: string
# This configuration is optional and comes with a default setting
# default: --long
# test_runner_options = 

# List of artifacts for Appveyor
# value type: List of strings
# This configuration is optional and comes with a default setting
# default: []
# artifacts = 


[tool.epab.qt]
# Qt resource file (.qrc) location
# value type: string
# This configuration is optional and comes with a default setting
# default: 
# res_src = 

# Compiled Qt resource file (.py) target location
# value type: string
# This configuration is optional and comes with a default setting
# default: 
# res_tgt = 
